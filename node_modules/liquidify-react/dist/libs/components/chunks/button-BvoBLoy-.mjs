import { jsx as C } from "react/jsx-runtime";
import { forwardRef as l } from "react";
import { g as d, u as g, c as m, s as b, b as V, a as h, d as v, f as w, e as P, h as j, w as F, m as K } from "./cx-D9r_yMH-.mjs";
const M = (t, n, a) => {
  const r = (s) => ({
    [t]: "__ignore__",
    ...n,
    ...V(s)
  });
  return {
    recipeFn: (s, i = !0) => {
      const p = v({
        conditions: {
          shift: P,
          finalize: w,
          breakpoints: { keys: ["base"] }
        },
        utility: {
          toHash: (o, e) => e(o.join(":")),
          transform: (o, e) => (j(t, a, s, o), e === "__ignore__" ? { className: t } : (e = F(e), { className: `${t}--${o}_${e}` }))
        }
      }), u = r(s);
      if (i) {
        const o = d(a, u);
        return m(p(u), h(o));
      }
      return p(u);
    },
    getVariantProps: r,
    __getCompoundVariantCss__: (s) => d(a, r(s))
  };
}, $ = (t, n) => {
  if (t && !n) return t;
  if (!t && n) return n;
  const a = (...s) => m(t(...s), n(...s)), r = g(t.variantKeys, n.variantKeys), _ = r.reduce((s, i) => (s[i] = g(t.variantMap[i], n.variantMap[i]), s), {});
  return Object.assign(a, {
    __recipe__: !0,
    __name__: `${t.__name__} ${n.__name__}`,
    raw: (s) => s,
    variantKeys: r,
    variantMap: _,
    splitVariantProps(s) {
      return b(s, r);
    }
  });
}, c = /* @__PURE__ */ M(
  "liquid-button",
  {
    variant: "primary",
    size: "md"
  },
  []
), y = {
  variant: ["primary", "secondary", "ghost", "danger", "success", "warning"],
  size: ["sm", "md", "lg", "xl"]
}, f = Object.keys(y), x = /* @__PURE__ */ Object.assign(K(c.recipeFn), {
  __recipe__: !0,
  __name__: "button",
  __getCompoundVariantCss__: c.__getCompoundVariantCss__,
  raw: (t) => t,
  variantKeys: f,
  variantMap: y,
  merge(t) {
    return $(this, t);
  },
  splitVariantProps(t) {
    return b(t, f);
  },
  getVariantProps: c.getVariantProps
}), z = l(
  ({ variant: t = "primary", size: n = "md", className: a, children: r, ..._ }, s) => /* @__PURE__ */ C(
    "button",
    {
      ref: s,
      className: m(
        // Use Panda recipe classes for full styling (variants + sizes)
        x({ variant: t, size: n }),
        a
      ),
      ..._,
      children: r
    }
  )
);
z.displayName = "Button";
export {
  z as B
};
//# sourceMappingURL=button-BvoBLoy-.mjs.map
